// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ OpenStreetMap Nominatim (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
export interface GeocodingResult {
  address: string;
  lat: number;
  lng: number;
  formatted_address: string;
  place_id?: string;
  types?: string[];
}

export interface GeocodingSuggestion {
  description: string;
  place_id: string;
  structured_formatting: {
    main_text: string;
    secondary_text: string;
  };
}

class GeocodingApiService {
  private readonly NOMINATIM_URL = 'https://nominatim.openstreetmap.org';

  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–∞–¥—Ä–µ—Å -> –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã) —á–µ—Ä–µ–∑ Nominatim
  async geocodeAddress(address: string): Promise<GeocodingResult | null> {
    try {
      console.log('üó∫Ô∏è –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Nominatim:', address);
      
      const response = await fetch(
        `${this.NOMINATIM_URL}/search?format=json&q=${encodeURIComponent(address)}&countrycodes=ua&limit=1&addressdetails=1`,
        {
          headers: {
            'User-Agent': 'DreamShop/1.0'
          }
        }
      );

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç Nominatim:', data);

      if (data && data.length > 0) {
        const result = data[0];
        console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', result.lat, result.lon);
        return {
          address: result.display_name,
          lat: parseFloat(result.lat),
          lng: parseFloat(result.lon),
          formatted_address: result.display_name,
          place_id: result.place_id,
          types: result.type ? [result.type] : [],
        };
      }

      console.log('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Nominatim:', error);
      return null;
    }
  }

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -> –∞–¥—Ä–µ—Å) —á–µ—Ä–µ–∑ Nominatim
  async reverseGeocode(lat: number, lng: number): Promise<GeocodingResult | null> {
    try {
      console.log('üó∫Ô∏è –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Nominatim:', lat, lng);
      
      const response = await fetch(
        `${this.NOMINATIM_URL}/reverse?format=json&lat=${lat}&lon=${lng}&addressdetails=1`,
        {
          headers: {
            'User-Agent': 'DreamShop/1.0'
          }
        }
      );

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç Nominatim (reverse):', data);

      if (data && data.display_name) {
        console.log('‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω:', data.display_name);
        return {
          address: data.display_name,
          lat: parseFloat(data.lat),
          lng: parseFloat(data.lon),
          formatted_address: data.display_name,
          place_id: data.place_id,
          types: data.type ? [data.type] : [],
        };
      }

      console.log('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Nominatim:', error);
      return null;
    }
  }

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Nominatim
  async getAddressSuggestions(input: string, country: string = 'ua'): Promise<GeocodingSuggestion[]> {
    try {
      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Nominatim –¥–ª—è:', input);
      
      if (input.length < 3) {
        return [];
      }

      const response = await fetch(
        `${this.NOMINATIM_URL}/search?format=json&q=${encodeURIComponent(input)}&countrycodes=${country}&limit=5&addressdetails=1&extratags=1`,
        {
          headers: {
            'User-Agent': 'DreamShop/1.0'
          }
        }
      );

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç Nominatim (autocomplete):', data);

      if (data && data.length > 0) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ Nominatim:', data.length);
        return data.map((result: any, index: number) => ({
          description: result.display_name,
          place_id: result.place_id || `nominatim_${index}`,
          structured_formatting: {
            main_text: result.name || result.display_name.split(',')[0],
            secondary_text: result.display_name.split(',').slice(1).join(',').trim(),
          },
        }));
      }

      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –û–¥–µ—Å—Å—ã
      console.log('üîÑ Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –û–¥–µ—Å—Å—ã');
      return this.getLocalAddressSuggestions(input, country);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Nominatim:', error);
      // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
      return this.getLocalAddressSuggestions(input, country);
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –û–¥–µ—Å—Å—ã –∫–∞–∫ fallback
  private getLocalAddressSuggestions(input: string, country: string): GeocodingSuggestion[] {
    if (country === 'ua' && input.length > 2) {
      const ukrainianAddresses = [
        '–≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 16, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π –±—É–ª—å–≤–∞—Ä, 1, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –†—ñ—à–µ–ª—å—î–≤—Å—å–∫–∞, 33, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–ø—Ä. –®–µ–≤—á–µ–Ω–∫–∞, 2, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –õ–∞–Ω–∂–µ—Ä–æ–Ω—ñ–≤—Å—å–∫–∞, 2, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –ü—É—à–∫—ñ–Ω—Å—å–∫–∞, 9, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –ì—Ä–µ—Ü—å–∫–∞, 1, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
        '–≤—É–ª. –Ñ–≤—Ä–µ–π—Å—å–∫–∞, 25, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
      ];
      
      const filtered = ukrainianAddresses.filter(addr => 
        addr.toLowerCase().includes(input.toLowerCase())
      );
      
      if (filtered.length > 0) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:', filtered.length);
        return filtered.map((address, index) => ({
          description: address,
          place_id: `local_${index}`,
          structured_formatting: {
            main_text: address.split(',')[0],
            secondary_text: address.split(',').slice(1).join(',').trim(),
          },
        }));
      }
    }
    
    return [];
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –ø–æ place_id
  async getPlaceDetails(placeId: string): Promise<GeocodingResult | null> {
    try {
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (placeId.startsWith('local_')) {
        const localAddresses = [
          '–≤—É–ª. –î–µ—Ä–∏–±–∞—Å—ñ–≤—Å—å–∫–∞, 16, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
          '–≤—É–ª. –ü—Ä–∏–º–æ—Ä—Å—å–∫–∏–π –±—É–ª—å–≤–∞—Ä, 1, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
          '–≤—É–ª. –†—ñ—à–µ–ª—å—î–≤—Å—å–∫–∞, 33, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
          '–ø—Ä. –®–µ–≤—á–µ–Ω–∫–∞, 2, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å',
          '–≤—É–ª. –õ–∞–Ω–∂–µ—Ä–æ–Ω—ñ–≤—Å—å–∫–∞, 2, –û–¥–µ—Å–∞, –û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å'
        ];
        
        const index = parseInt(placeId.replace('local_', ''));
        const address = localAddresses[index];
        
        if (address) {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ—Ä–µ–∑ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
          const coords = await this.geocodeAddress(address);
          return coords || {
            address,
            lat: 46.4825, // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –û–¥–µ—Å—Å—ã
            lng: 30.7233,
            formatted_address: address,
            place_id: placeId,
            types: ['street_address']
          };
        }
      }

      // –î–ª—è Nominatim place_id
      if (placeId.startsWith('nominatim_')) {
        console.log('‚ö†Ô∏è Nominatim place_id –¥–µ—Ç–∞–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é');
        return null;
      }

      console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ Nominatim:', placeId);
      const response = await fetch(
        `${this.NOMINATIM_URL}/details?format=json&place_id=${placeId}&addressdetails=1`,
        {
          headers: {
            'User-Agent': 'DreamShop/1.0'
          }
        }
      );

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç Nominatim (details):', data);

      if (data && data.display_name) {
        return {
          address: data.display_name,
          lat: parseFloat(data.lat),
          lng: parseFloat(data.lon),
          formatted_address: data.display_name,
          place_id: data.place_id,
          types: data.type ? [data.type] : [],
        };
      }

      return null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –º–µ—Å—Ç–∞:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
  async validateAddress(address: string): Promise<boolean> {
    try {
      const result = await this.geocodeAddress(address);
      return result !== null;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async getDistance(
    origin: { lat: number; lng: number },
    destination: { lat: number; lng: number }
  ): Promise<{ distance: string; duration: string } | null> {
    try {
      // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
      const R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
      const dLat = this.toRadians(destination.lat - origin.lat);
      const dLng = this.toRadians(destination.lng - origin.lng);
      
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(this.toRadians(origin.lat)) * Math.cos(this.toRadians(destination.lat)) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
      
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c;

      // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è (50 –∫–º/—á —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å)
      const duration = distance / 50;

      return {
        distance: `${distance.toFixed(1)} –∫–º`,
        duration: `${Math.round(duration * 60)} –º–∏–Ω`
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:', error);
      return null;
    }
  }

  private toRadians(degrees: number): number {
    return degrees * (Math.PI / 180);
  }
}

export const geocodingApi = new GeocodingApiService();