// –°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã
export interface NovaPoshtaWarehouse {
  SiteKey: string;
  Description: string;
  DescriptionRu: string;
  ShortAddress: string;
  ShortAddressRu: string;
  Phone: string;
  TypeOfWarehouse: string;
  Number: string;
  CityRef: string;
  CityDescription: string;
  CityDescriptionRu: string;
  SettlementRef: string;
  SettlementDescription: string;
  SettlementDescriptionRu: string;
  SettlementTypeDescription: string;
  SettlementTypeDescriptionRu: string;
  Longitude: string;
  Latitude: string;
  PostFinance: string;
  BicycleParking: string;
  PaymentAccess: string;
  POSTerminal: string;
  InternationalShipping: string;
  SelfServiceWorkplacesCount: string;
  TotalMaxWeightAllowed: string;
  PlaceMaxWeightAllowed: string;
  SendingLimitationsOnDimensions: {
    Width: number;
    Height: number;
    Length: number;
  };
  ReceivingLimitationsOnDimensions: {
    Width: number;
    Height: number;
    Length: number;
  };
  Reception: {
    Monday: string;
    Tuesday: string;
    Wednesday: string;
    Thursday: string;
    Friday: string;
    Saturday: string;
    Sunday: string;
  };
  Delivery: {
    Monday: string;
    Tuesday: string;
    Wednesday: string;
    Thursday: string;
    Friday: string;
    Saturday: string;
    Sunday: string;
  };
  Schedule: {
    Monday: string;
    Tuesday: string;
    Wednesday: string;
    Thursday: string;
    Friday: string;
    Saturday: string;
    Sunday: string;
  };
  DistrictCode: string;
  WarehouseStatus: string;
  WarehouseStatusDate: string;
  CategoryOfWarehouse: string;
  Direct: string;
  RegionCity: string;
  WarehouseForAgent: string;
  GeneratorEnabled: string;
  MaxDeclaredCost: string;
  WorkInMobileAwis: string;
  DenyToSelect: string;
  CanGetMoneyTransfer: string;
  OnlyReceivingParcel: string;
  PostMachineType: string;
  PostalCodeUA: string;
  WarehouseIndex: string;
  BeaconCode: string;
}

export interface NovaPoshtaCity {
  Ref: string;
  Description: string;
  DescriptionRu: string;
  DescriptionTranslit: string;
  SettlementTypeDescription: string;
  SettlementTypeDescriptionRu: string;
  SettlementTypeDescriptionTranslit: string;
  Region: string;
  RegionsDescription: string;
  RegionsDescriptionRu: string;
  RegionsDescriptionTranslit: string;
  Area: string;
  AreaDescription: string;
  AreaDescriptionRu: string;
  AreaDescriptionTranslit: string;
  Index1: string;
  Index2: string;
  IndexCOATSU1: string;
  Delivery1: string;
  Delivery2: string;
  Delivery3: string;
  Delivery4: string;
  Delivery5: string;
  Delivery6: string;
  Delivery7: string;
  Warehouse: string;
}

class NovaPoshtaApiService {
  private readonly API_KEY = process.env.REACT_APP_NOVA_POSHTA_API_KEY || '01b6aa62c09ccb6f0218cf21e3f5de33';
  private readonly API_URL = 'https://api.novaposhta.ua/v2.0/json/';

  // –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  async searchCities(cityName: string): Promise<NovaPoshtaCity[]> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –¥–ª—è:', cityName);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'Address',
          calledMethod: 'searchSettlements',
          methodProperties: {
            CityName: cityName,
            Limit: 10,
          },
        }),
      });

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç API –ù–æ–≤–æ–π –ü–æ—á—Ç—ã:', data);
      
      if (data.success && data.data && data.data.length > 0) {
        const addresses = data.data[0].Addresses || [];
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤:', addresses.length);
        
        // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
        if (addresses.length === 0) {
          console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...');
          return await this.searchCitiesAlternative(cityName);
        }
        
        return addresses;
      }
      
      console.log('‚ùå –ì–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ API');
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ù–æ–≤–æ–π –ü–æ—á—Ç—ã:', error);
      return [];
    }
  }

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤
  async searchCitiesAlternative(cityName: string): Promise<NovaPoshtaCity[]> {
    try {
      console.log('üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è:', cityName);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'Address',
          calledMethod: 'getCities',
          methodProperties: {
            FindByString: cityName,
            Limit: 10,
          },
        }),
      });

      const data = await response.json();
      console.log('üì° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç API:', data);
      
      if (data.success && data.data) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥):', data.data.length);
        return data.data;
      }
      
      console.log('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥—É
  async getWarehouses(cityRef: string): Promise<NovaPoshtaWarehouse[]> {
    try {
      console.log('üè¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞:', cityRef);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'AddressGeneral',
          calledMethod: 'getWarehouses',
          methodProperties: {
            CityRef: cityRef,
          },
        }),
      });

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç API –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', data);
      
      if (data.success) {
        if (data.data && data.data.length > 0) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', data.data.length);
          return data.data;
        } else {
          console.log('‚ö†Ô∏è API —É—Å–ø–µ—à–Ω–æ, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ. –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏—è –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
          return await this.getWarehousesSimple(cityRef);
        }
      }
      
      console.log('‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', data);
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ù–æ–≤–æ–π –ü–æ—á—Ç—ã:', error);
      return [];
    }
  }

  // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤)
  async getWarehousesSimple(cityRef: string): Promise<NovaPoshtaWarehouse[]> {
    try {
      console.log('üè¢ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞:', cityRef);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'AddressGeneral',
          calledMethod: 'getWarehouses',
          methodProperties: {
            CityRef: cityRef,
            TypeOfWarehouseRef: '841339c7-591a-42e2-8233-7a0a00f0edbd',
          },
        }),
      });

      const data = await response.json();
      console.log('üì° –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç API –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', data);
      
      if (data.success && data.data) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–π (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥):', data.data.length);
        return data.data;
      }
      
      console.log('‚ùå –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  async searchWarehouses(warehouseName: string, cityRef?: string): Promise<NovaPoshtaWarehouse[]> {
    try {
      console.log('üè¢ –ü–æ–∏—Å–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ù–æ–≤–æ–π –ü–æ—á—Ç—ã –¥–ª—è:', warehouseName, '–≤ –≥–æ—Ä–æ–¥–µ:', cityRef);
      
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'AddressGeneral',
          calledMethod: 'getWarehouses',
          methodProperties: {
            FindByString: warehouseName,
            CityRef: cityRef,
            Limit: 20,
          },
        }),
      });

      const data = await response.json();
      console.log('üì° –û—Ç–≤–µ—Ç API –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ù–æ–≤–æ–π –ü–æ—á—Ç—ã:', data);
      
      if (data.success && data.data) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ç–¥–µ–ª–µ–Ω–∏–π:', data.data.length);
        return data.data;
      }
      
      console.log('‚ùå –û—Ç–¥–µ–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ API');
      return [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–¥–µ–ª–µ–Ω–∏–π –ù–æ–≤–æ–π –ü–æ—á—Ç—ã:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
  async getDeliveryCost(
    citySender: string,
    cityRecipient: string,
    serviceType: string = 'WarehouseWarehouse',
    weight: number = 0.5,
    cost: number = 0
  ): Promise<number> {
    try {
      const response = await fetch(this.API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: this.API_KEY,
          modelName: 'InternetDocument',
          calledMethod: 'getDocumentPrice',
          methodProperties: {
            CitySender: citySender,
            CityRecipient: cityRecipient,
            ServiceType: serviceType,
            Weight: weight,
            Cost: cost,
            CargoType: 'Cargo',
            SeatsAmount: 1,
            PackCount: 1,
            PackRef: '1492c223-69d0-42e7-9b03-7b0a00f0edbd', // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞
            CargoDetails: [
              {
                CargoDescription: '–¢–æ–≤–∞—Ä—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞',
                Amount: 1,
                Weight: weight,
                Cost: cost,
              },
            ],
          },
        }),
      });

      const data = await response.json();
      
      if (data.success && data.data && data.data.length > 0) {
        return data.data[0].Cost || 0;
      }
      
      return 0;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error);
      return 0;
    }
  }
}

export const novaPoshtaApi = new NovaPoshtaApiService();
