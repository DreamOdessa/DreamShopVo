import { userService } from '../firebase/services';
import { User } from '../types';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export const makeCurrentUserAdmin = async (): Promise<boolean> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
    const savedUser = localStorage.getItem('dreamshop_user');
    if (!savedUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
      return false;
    }

    const user: User = JSON.parse(savedUser);
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.email);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    const updatedUser = { ...user, isAdmin: true };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
    await userService.createOrUpdate(updatedUser);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º localStorage
    localStorage.setItem('dreamshop_user', JSON.stringify(updatedUser));
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º:', user.email);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞:', error);
    return false;
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const cleanupDuplicateUsers = async (): Promise<void> => {
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const allUsers = await userService.getAll();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ email
    const usersByEmail: { [email: string]: User[] } = {};
    allUsers.forEach(user => {
      if (!usersByEmail[user.email]) {
        usersByEmail[user.email] = [];
      }
      usersByEmail[user.email].push(user);
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    for (const email in usersByEmail) {
      const users = usersByEmail[email];
      if (users.length > 1) {
        console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è ${email}: ${users.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å isAdmin –µ—Å–ª–∏ –µ—Å—Ç—å)
        const adminUser = users.find(u => u.isAdmin);
        const keepUser = adminUser || users[users.length - 1];
        
        // –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
        for (const user of users) {
          if (user.id !== keepUser.id) {
            console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${user.id}`);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ userService
          }
        }
      }
    }
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
declare global {
  interface Window {
    makeAdmin: () => Promise<boolean>;
    cleanupUsers: () => Promise<void>;
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ window –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
if (typeof window !== 'undefined') {
  window.makeAdmin = makeCurrentUserAdmin;
  window.cleanupUsers = cleanupDuplicateUsers;
}
